// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: queries.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createBankAccount = `-- name: CreateBankAccount :exec
INSERT INTO users (username, balance) VALUES ($1, $2)
`

type CreateBankAccountParams struct {
	Username string
	Balance  pgtype.Numeric
}

func (q *Queries) CreateBankAccount(ctx context.Context, arg CreateBankAccountParams) error {
	_, err := q.db.Exec(ctx, createBankAccount, arg.Username, arg.Balance)
	return err
}

const deleteBankAccount = `-- name: DeleteBankAccount :exec
DELETE FROM users WHERE username = $1
`

func (q *Queries) DeleteBankAccount(ctx context.Context, username string) error {
	_, err := q.db.Exec(ctx, deleteBankAccount, username)
	return err
}

const getAllBankAccounts = `-- name: GetAllBankAccounts :many
SELECT id, username, balance FROM users
`

func (q *Queries) GetAllBankAccounts(ctx context.Context) ([]User, error) {
	rows, err := q.db.Query(ctx, getAllBankAccounts)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(&i.ID, &i.Username, &i.Balance); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getBankAccount = `-- name: GetBankAccount :one
SELECT id, username, balance FROM users WHERE username = $1
`

func (q *Queries) GetBankAccount(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRow(ctx, getBankAccount, username)
	var i User
	err := row.Scan(&i.ID, &i.Username, &i.Balance)
	return i, err
}

const updateBankAccountBalance = `-- name: UpdateBankAccountBalance :exec
UPDATE users SET balance = $2 WHERE username = $1
`

type UpdateBankAccountBalanceParams struct {
	Username string
	Balance  pgtype.Numeric
}

func (q *Queries) UpdateBankAccountBalance(ctx context.Context, arg UpdateBankAccountBalanceParams) error {
	_, err := q.db.Exec(ctx, updateBankAccountBalance, arg.Username, arg.Balance)
	return err
}

const updateBankAccountName = `-- name: UpdateBankAccountName :exec
UPDATE users SET username = $2 WHERE username = $1
`

type UpdateBankAccountNameParams struct {
	Username   string
	Username_2 string
}

func (q *Queries) UpdateBankAccountName(ctx context.Context, arg UpdateBankAccountNameParams) error {
	_, err := q.db.Exec(ctx, updateBankAccountName, arg.Username, arg.Username_2)
	return err
}
